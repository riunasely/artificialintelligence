print('Ujian Akhir Semester Genap 2021/2022')
print('Nama = Riuna Sely')
print('NIM = 19/447305/SV/16999')
print('Mata Kuliah = Pilihan Lintas Disiplin 1')
print('Program Studi = Teknologi Rekayasa Internet')
print('Simulasi Backpropagation XOR')
print('--------------------------------------------')

import numpy as np 
#np.random.seed(0)

def sigmoid (x):
    return 1/(1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

#Menginputkan dataset
inputs = np.array([[-1,-1,-1],[-1,-1,1],[-1,1,-1],[-1,1,1],[1,-1,-1],[1,-1,1],[1,1,-1],[1,1,1]])
expected_output = np.array([[-1],[1],[1],[-1],[1],[-1],[-1],[1]])

epochs = 10000
lr = 0.1
inputLayerNeurons, hiddenLayerNeurons, outputLayerNeurons = 3,1,1

#Menginisialisasi bias dan random weights
hidden_weights = np.random.uniform(size=(inputLayerNeurons,hiddenLayerNeurons))
hidden_bias = np.ones((1,hiddenLayerNeurons))
output_weights = np.random.uniform(size=(hiddenLayerNeurons,outputLayerNeurons))
output_bias = np.ones((1,outputLayerNeurons))

print("\nInisialisasi hidden weights: ",end='')
print(*hidden_weights)
print("Inisialisasi hidden biases: ",end='')
print(*hidden_bias)
print("Inisialisasi output weights: ",end='')
print(*output_weights)
print("Inisialisasi output biases: ",end='')
print(*output_bias)

#Melakukan training pada algoritma yang telah dibuat
for _ in range(epochs):
	#Forward Propagation
	hidden_layer_activation = np.dot(inputs,hidden_weights)
	hidden_layer_activation += hidden_bias
	hidden_layer_output = sigmoid(hidden_layer_activation)

	output_layer_activation = np.dot(hidden_layer_output,output_weights)
	output_layer_activation += output_bias
	predicted_output = sigmoid(output_layer_activation)

	#Backpropagation
	error = expected_output - predicted_output
	d_predicted_output = error * sigmoid_derivative(predicted_output)
	
	error_hidden_layer = d_predicted_output.dot(output_weights.T)
	d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

	#Updating Weights and Biases
	output_weights += hidden_layer_output.T.dot(d_predicted_output) * lr
	output_bias += np.sum(d_predicted_output,axis=0,keepdims=True) * lr
	hidden_weights += inputs.T.dot(d_hidden_layer) * lr
	hidden_bias += np.sum(d_hidden_layer,axis=0,keepdims=True) * lr

print("\nHasil final hidden weights: ",end='')
print(*hidden_weights)
print("Hasil final hidden bias: ",end='')
print(*hidden_bias)
print("Hasil final output weights: ",end='')
print(*output_weights)
print("Hasil final output bias: ",end='')
print(*output_bias)
print('--------------------------------------------')

print("\nOutput dari jaringan syaraf setelah 10,000 epoch adalah: ",end='')
print(*predicted_output)
